name: Publish Ã†therLight

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.3)'
        required: true
      skip_npm:
        description: 'Skip npm publishing'
        required: false
        default: 'false'
      skip_vscode:
        description: 'Skip VS Code Marketplace publishing'
        required: false
        default: 'false'

jobs:
  # Build native bindings for all platforms
  build-bindings:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build

          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: npm run build -- --target aarch64-pc-windows-msvc

          - host: macos-13
            target: x86_64-apple-darwin
            build: npm run build

          - host: macos-14
            target: aarch64-apple-darwin
            build: npm run build

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              npm run build -- --target aarch64-unknown-linux-gnu

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        working-directory: packages/aetherlight-node
        run: npm install

      - name: Build native bindings
        working-directory: packages/aetherlight-node
        run: ${{ matrix.settings.build }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: packages/aetherlight-node/*.node
          if-no-files-found: error

  # Publish TypeScript packages to npm
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [build-bindings]
    if: github.event.inputs.skip_npm != 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all binding artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages/aetherlight-node/artifacts

      - name: Move binaries to package root
        working-directory: packages/aetherlight-node
        run: |
          for dir in artifacts/bindings-*; do
            cp $dir/*.node . 2>/dev/null || true
          done
          ls -la *.node

      # Publish SDK package
      - name: Install SDK dependencies
        working-directory: packages/aetherlight-sdk
        run: npm install

      - name: Build SDK
        working-directory: packages/aetherlight-sdk
        run: npm run build

      - name: Publish SDK to npm
        working-directory: packages/aetherlight-sdk
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish Analyzer package
      - name: Install Analyzer dependencies
        working-directory: packages/aetherlight-analyzer
        run: npm install

      - name: Build Analyzer
        working-directory: packages/aetherlight-analyzer
        run: npm run build

      - name: Publish Analyzer to npm
        working-directory: packages/aetherlight-analyzer
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish Node bindings package
      - name: Install Node bindings dependencies
        working-directory: packages/aetherlight-node
        run: npm install

      - name: Publish Node bindings to npm
        working-directory: packages/aetherlight-node
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish main VS Code extension package
      - name: Install VS Code extension dependencies
        working-directory: vscode-lumina
        run: npm install

      - name: Build VS Code extension
        working-directory: vscode-lumina
        run: npm run compile

      - name: Publish VS Code extension to npm
        working-directory: vscode-lumina
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish VS Code extension to Marketplace
  publish-vscode:
    name: Publish to VS Code Marketplace
    runs-on: ubuntu-latest
    needs: [publish-npm]
    if: github.event.inputs.skip_vscode != 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: vscode-lumina
        run: npm install

      - name: Build extension
        working-directory: vscode-lumina
        run: npm run compile

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Publish to VS Code Marketplace
        working-directory: vscode-lumina
        run: vsce publish -p ${{ secrets.VSCE_PAT }}
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-npm, publish-vscode]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Ã†therLight v${{ steps.version.outputs.VERSION }}
          body: |
            ## Ã†therLight v${{ steps.version.outputs.VERSION }}

            ### Installation

            ```bash
            npm install -g aetherlight
            ```

            Or update existing installation:

            ```bash
            npm update -g aetherlight
            ```

            ### Packages Published

            - ðŸ“¦ `aetherlight` - VS Code extension + CLI
            - ðŸ“¦ `aetherlight-sdk` - Application integration SDK
            - ðŸ“¦ `aetherlight-analyzer` - Code analyzer CLI
            - ðŸ“¦ `aetherlight-node` - Native Rust bindings

            ### Links

            - [npm Package](https://www.npmjs.com/package/aetherlight)
            - [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=aetherlight.aetherlight)
            - [Documentation](https://github.com/AEtherlight-ai/lumina)
            - [Discord Community](https://discord.gg/ExkyhBny)

            ### What's New

            See [CHANGELOG.md](https://github.com/AEtherlight-ai/lumina/blob/master/CHANGELOG.md) for full details.
          draft: false
          prerelease: false
