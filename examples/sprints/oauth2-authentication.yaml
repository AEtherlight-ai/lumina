# OAuth2 Authentication Sprint - Example Sprint Plan
#
# This file demonstrates the sprint plan format for Phase 4 autonomous execution.
# Human + Planning Agent would collaboratively create this file,
# then Project Manager Agent executes it autonomously.
#
# DESIGN DECISION: YAML format for human readability and version control
# WHY: Engineers and AI collaborate on sprint plans, need readable format
#
# PATTERN: Pattern-SPRINT-PLAN-001 (Structured Sprint Definition)

sprint:
  name: "Add OAuth2 Authentication with PKCE"
  duration: "1 week"

  goals:
    - "Implement OAuth2 with PKCE (Proof Key for Code Exchange)"
    - "Add user session management"
    - "Write comprehensive integration tests"
    - "Document authentication flow"

  tasks:
    # Database tasks (can run in parallel with UI)
    - id: "DB-001"
      title: "Create users and sessions tables"
      agent: "database"
      duration: "2 hours"
      dependencies: []
      files:
        - "migrations/001_create_users.sql"
        - "migrations/002_create_sessions.sql"
      patterns:
        - "Pattern-DB-001"
        - "Pattern-DB-002"
      acceptance_criteria:
        - "users table with email, password_hash, created_at, updated_at"
        - "sessions table with token, user_id, expires_at"
        - "Foreign key from sessions.user_id to users.id"
        - "Migration reversible (up + down SQL)"
        - "Indexes on frequently queried columns"

    # UI tasks (can run in parallel with DB)
    - id: "UI-001"
      title: "Create login page component"
      agent: "ui"
      duration: "3 hours"
      dependencies: []
      files:
        - "src/components/LoginPage.tsx"
        - "src/components/LoginForm.tsx"
      patterns:
        - "Pattern-UI-001"
        - "Pattern-REACT-001"
      acceptance_criteria:
        - "Login form with email/password fields"
        - "OAuth2 redirect button"
        - "Error message display"
        - "Loading state handling"
        - "Accessible (ARIA labels, keyboard navigation)"

    # API tasks (depends on DB-001)
    - id: "API-001"
      title: "Implement OAuth2 endpoints"
      agent: "api"
      duration: "4 hours"
      dependencies: ["DB-001"]
      files:
        - "src/routes/oauth2.ts"
        - "src/middleware/auth.ts"
      patterns:
        - "Pattern-API-001"
        - "Pattern-AUTH-001"
        - "Pattern-REST-001"
      acceptance_criteria:
        - "GET /oauth2/authorize endpoint"
        - "POST /oauth2/token endpoint"
        - "PKCE code challenge validation"
        - "State parameter for CSRF protection"
        - "JWT token generation"
        - "Secure cookie handling"

    # Testing (depends on API-001 and UI-001)
    - id: "TEST-001"
      title: "Integration tests for OAuth2 flow"
      agent: "test"
      duration: "3 hours"
      dependencies: ["API-001", "UI-001"]
      files:
        - "tests/integration/oauth2_flow_test.ts"
        - "tests/integration/session_management_test.ts"
      acceptance_criteria:
        - "Test full OAuth2 authorization flow"
        - "Test PKCE validation (valid and invalid)"
        - "Test state parameter validation"
        - "Test session creation and validation"
        - "Test session expiration"
        - ">85% code coverage"

    # Documentation (can run in parallel with testing)
    - id: "DOCS-001"
      title: "Document authentication flow"
      agent: "docs"
      duration: "1 hour"
      dependencies: ["API-001"]
      files:
        - "docs/authentication.md"
        - "docs/api/oauth2-endpoints.md"
      acceptance_criteria:
        - "Chain of Thought documentation in code"
        - "API endpoint documentation complete"
        - "Authentication flow diagram"
        - "Security considerations documented"

    # Review (depends on all implementation tasks)
    - id: "REVIEW-001"
      title: "Security and code quality review"
      agent: "review"
      duration: "1 hour"
      dependencies: ["TEST-001", "DOCS-001"]
      acceptance_criteria:
        - "No secrets in code"
        - "No SQL injection vulnerabilities"
        - "CSRF protection validated"
        - "Code quality score >7.5/10"
        - "Linting passed"

    # Commit (final step)
    - id: "COMMIT-001"
      title: "Create pull request"
      agent: "commit"
      duration: "15 minutes"
      dependencies: ["REVIEW-001"]
      acceptance_criteria:
        - "Git commit with Chain of Thought message"
        - "PR created with description"
        - "Tests passing in CI"

  approval_gates:
    # Gate 1: After core implementation, before testing
    - stage: "after-core-implementation"
      requires: ["DB-001", "API-001", "UI-001"]
      message: "Review database schema and API endpoints before proceeding to testing"

    # Gate 2: Before merging to main
    - stage: "before-merge"
      requires: ["REVIEW-001"]
      message: "Final review before merging OAuth2 authentication"
